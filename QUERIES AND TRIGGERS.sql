-- Script for the queries and triggers.


-- Query 1
SELECT 
    c.NAME AS Club_Name,
    p.NICKNAME AS Player_Nickname,
    COUNT(t.TOURNAMENTID) / NULLIF(COUNT(DISTINCT p.NICKNAME), 0) AS Avg_Tournaments
FROM 
    PLAYERS_IN_CLUB pic
JOIN 
    PLAYERS p ON pic.PLAYERID = p.NICKNAME
JOIN 
    CLUBS c ON pic.CLUBID = c.CLUBID
LEFT JOIN 
    TOURNAMENTS t ON t.IDORGANIZER = p.NICKNAME AND t.IDCLUB = c.CLUBID
WHERE 
    pic.LEFTDATE IS NULL -- Only active players
GROUP BY 
    c.NAME, p.NICKNAME;


-- Query 2


SELECT CLUBS.NAME, TITLES.TITLENAME, COUNT(PLAYERS_IN_CLUB.PLAYERID) AS "PLAYERS IN CLUB"
FROM 
PLAYER_HAS_TITLE JOIN 
PLAYERS_IN_CLUB ON PLAYERS_IN_CLUB.PLAYERID = PLAYER_HAS_TITLE.PLAYERID 
JOIN CLUBS ON CLUBS.CLUBID = PLAYERS_IN_CLUB.CLUBID 
JOIN TITLES ON TITLES.TITLEID = PLAYER_HAS_TITLE.TITLEID 
WHERE PLAYERS_IN_CLUB.LEFTDATE IS NULL 
GROUP BY CLUBS.NAME, TITLES.TITLENAME
ORDER BY CLUBS.NAME DESC;


-- Query 3


SELECT GIFT.GIFTTYPE, COUNT(*) AS "NUMBER OF GIFTS PER GROUP"
FROM PLAYEROBTAINGIFT 
JOIN GIFT ON PLAYEROBTAINGIFT.GIFTID = GIFT.GIFTID
WHERE PLAYEROBTAINGIFT."DATE" > TO_DATE('2020-12-31', 'YYYY-MM-DD')
GROUP BY GIFT.GIFTTYPE;  


-- Query 4
SELECT 
    t."NAME" AS Tournament_Name,
    t."DATE" AS Tournament_Date,
    tm.NAME AS Team_Name,
    COUNT(g.GAMEID) AS Games_Won_With_White
FROM 
    GAMES g
JOIN 
    TOURNAMENTS t ON g.TOURNAMENTID = t.TOURNAMENTID
JOIN 
    PLAYER_TEAM pt ON pt.IDPLAYERINTOURNAMENT = g.WHITEPLAYER
JOIN 
    TEAMS tm ON tm.IDTEAM = pt.IDTEAM AND tm.IDTOURNAMENT = t.TOURNAMENTID
WHERE 
    g.RESULT = 1  -- Only count games won by the white player
GROUP BY 
    t."NAME", t."DATE", tm.NAME, g.WHITEPLAYER
ORDER BY 
    t."DATE" ASC,
    Games_Won_With_White DESC; 

-- Trigger 1 

CREATE SEQUENCE CODE_ORDER 
START WITH 1 
INCREMENT BY 1;


CREATE OR REPLACE TRIGGER CODE_ASSIGNER 
BEFORE INSERT ON CLUBS 
FOR EACH ROW 
BEGIN 
SELECT CODE_ORDER.nextval INTO :new.CLUBID FROM dual; 
END; 
/
-- Trigger 2

CREATE OR REPLACE TRIGGER CHECK_PLAYERS_IN_CLUB
BEFORE INSERT ON GAMES
FOR EACH ROW
DECLARE
    v_club_id NUMBER;
    v_player_in_club_count NUMBER;
BEGIN
    SELECT IDCLUB INTO v_club_id
    FROM TOURNAMENTS
    WHERE TOURNAMENTID = :NEW.TOURNAMENTID;

    SELECT COUNT(*)
    INTO v_player_in_club_count
    FROM PLAYERS_IN_CLUB
    WHERE PLAYERID = :NEW.WHITEPLAYER
    AND CLUBID = v_club_id
    AND LEFTDATE IS NULL; 


    IF v_player_in_club_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'White player is not in the club or has left.');
    END IF;


    SELECT COUNT(*)
    INTO v_player_in_club_count
    FROM PLAYERS_IN_CLUB
    WHERE PLAYERID = :NEW.BLACKPLAYER
    AND CLUBID = v_club_id
    AND LEFTDATE IS NULL; 


    IF v_player_in_club_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'Black player is not in the club or has left.');
    END IF;
END;
/
-- Trigger 3

-- Since in the statement there is no reward in points for the result of each registered game, I have assumed that winning a game will give you 100 points.


CREATE OR REPLACE TRIGGER UPDATE_PLAYER_RATINGS
AFTER INSERT ON GAMES
FOR EACH ROW
BEGIN
    IF :NEW.RESULT = 1 THEN
        UPDATE PLAYERS
        SET RATING = RATING + 100
        WHERE NICKNAME = :NEW.WHITEPLAYER;
    
    ELSIF :NEW.RESULT = -1 THEN
        UPDATE PLAYERS
        SET RATING = RATING + 100
        WHERE NICKNAME = :NEW.BLACKPLAYER;
    END IF;
END;
/
-- Trigger 4


CREATE OR REPLACE TRIGGER BUY_GIFT
BEFORE INSERT ON PLAYEROBTAINGIFT
FOR EACH ROW
DECLARE
    PLAYER_RATING NUMBER;
    GIFT_STOCK NUMBER;
    GIFT_COST NUMBER;
BEGIN
    SELECT RATING INTO PLAYER_RATING 
    FROM PLAYERS 
    WHERE NICKNAME = :NEW.PLAYERID;


    SELECT STOCK, COST INTO GIFT_STOCK, GIFT_COST 
    FROM GIFT 
    WHERE GIFTID = :NEW.GIFTID;


    IF PLAYER_RATING < GIFT_COST OR GIFT_STOCK = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Error: Not enough rating to buy that gift or not enough stock of that gift');
    ELSE


        UPDATE PLAYERS SET RATING = RATING - GIFT_COST
        WHERE NICKNAME = :NEW.PLAYERID;
       
        UPDATE GIFT SET STOCK = STOCK - 1 
        WHERE GIFTID = :NEW.GIFTID;
    END IF;
END;

/


